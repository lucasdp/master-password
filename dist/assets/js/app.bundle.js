!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(){var t={},e=t.util=t.util||{};function r(t){if(this.data="",this.read=0,"string"==typeof t)this.data=t;else if(e.isArrayBuffer(t)||e.isArrayBufferView(t)){var i=new Uint8Array(t);try{this.data=String.fromCharCode.apply(null,i)}catch(t){for(var a=0;a<i.length;++a)this.putByte(i[a])}}else(t instanceof r||"object"===(void 0===t?"undefined":n(t))&&"string"==typeof t.data&&"number"==typeof t.read)&&(this.data=t.data,this.read=t.read);this._constructedStringLength=0}e.isArrayBuffer=function(t){return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer},e.isArrayBufferView=function(t){return t&&e.isArrayBuffer(t.buffer)&&void 0!==t.byteLength},e.ByteBuffer=r,e.ByteStringBuffer=r;e.ByteStringBuffer.prototype._optimizeConstructedString=function(t){this._constructedStringLength+=t,this._constructedStringLength>4096&&(this.data.substr(0,1),this._constructedStringLength=0)},e.ByteStringBuffer.prototype.length=function(){return this.data.length-this.read},e.ByteStringBuffer.prototype.isEmpty=function(){return this.length()<=0},e.ByteStringBuffer.prototype.putByte=function(t){return this.putBytes(String.fromCharCode(t))},e.ByteStringBuffer.prototype.fillWithByte=function(t,e){t=String.fromCharCode(t);for(var r=this.data;e>0;)1&e&&(r+=t),(e>>>=1)>0&&(t+=t);return this.data=r,this._optimizeConstructedString(e),this},e.ByteStringBuffer.prototype.putBytes=function(t){return this.data+=t,this._optimizeConstructedString(t.length),this},e.ByteStringBuffer.prototype.putString=function(t){return this.putBytes(e.encodeUtf8(t))},e.ByteStringBuffer.prototype.putInt16=function(t){return this.putBytes(String.fromCharCode(t>>8&255)+String.fromCharCode(255&t))},e.ByteStringBuffer.prototype.putInt24=function(t){return this.putBytes(String.fromCharCode(t>>16&255)+String.fromCharCode(t>>8&255)+String.fromCharCode(255&t))},e.ByteStringBuffer.prototype.putInt32=function(t){return this.putBytes(String.fromCharCode(t>>24&255)+String.fromCharCode(t>>16&255)+String.fromCharCode(t>>8&255)+String.fromCharCode(255&t))},e.ByteStringBuffer.prototype.putInt16Le=function(t){return this.putBytes(String.fromCharCode(255&t)+String.fromCharCode(t>>8&255))},e.ByteStringBuffer.prototype.putInt24Le=function(t){return this.putBytes(String.fromCharCode(255&t)+String.fromCharCode(t>>8&255)+String.fromCharCode(t>>16&255))},e.ByteStringBuffer.prototype.putInt32Le=function(t){return this.putBytes(String.fromCharCode(255&t)+String.fromCharCode(t>>8&255)+String.fromCharCode(t>>16&255)+String.fromCharCode(t>>24&255))},e.ByteStringBuffer.prototype.putInt=function(t,e){var r="";do{e-=8,r+=String.fromCharCode(t>>e&255)}while(e>0);return this.putBytes(r)},e.ByteStringBuffer.prototype.putSignedInt=function(t,e){return t<0&&(t+=2<<e-1),this.putInt(t,e)},e.ByteStringBuffer.prototype.putBuffer=function(t){return this.putBytes(t.getBytes())},e.ByteStringBuffer.prototype.getByte=function(){return this.data.charCodeAt(this.read++)},e.ByteStringBuffer.prototype.getInt16=function(){var t=this.data.charCodeAt(this.read)<<8^this.data.charCodeAt(this.read+1);return this.read+=2,t},e.ByteStringBuffer.prototype.getInt24=function(){var t=this.data.charCodeAt(this.read)<<16^this.data.charCodeAt(this.read+1)<<8^this.data.charCodeAt(this.read+2);return this.read+=3,t},e.ByteStringBuffer.prototype.getInt32=function(){var t=this.data.charCodeAt(this.read)<<24^this.data.charCodeAt(this.read+1)<<16^this.data.charCodeAt(this.read+2)<<8^this.data.charCodeAt(this.read+3);return this.read+=4,t},e.ByteStringBuffer.prototype.getInt16Le=function(){var t=this.data.charCodeAt(this.read)^this.data.charCodeAt(this.read+1)<<8;return this.read+=2,t},e.ByteStringBuffer.prototype.getInt24Le=function(){var t=this.data.charCodeAt(this.read)^this.data.charCodeAt(this.read+1)<<8^this.data.charCodeAt(this.read+2)<<16;return this.read+=3,t},e.ByteStringBuffer.prototype.getInt32Le=function(){var t=this.data.charCodeAt(this.read)^this.data.charCodeAt(this.read+1)<<8^this.data.charCodeAt(this.read+2)<<16^this.data.charCodeAt(this.read+3)<<24;return this.read+=4,t},e.ByteStringBuffer.prototype.getInt=function(t){var e=0;do{e=(e<<8)+this.data.charCodeAt(this.read++),t-=8}while(t>0);return e},e.ByteStringBuffer.prototype.getSignedInt=function(t){var e=this.getInt(t),r=2<<t-2;return e>=r&&(e-=r<<1),e},e.ByteStringBuffer.prototype.getBytes=function(t){var e;return t?(t=Math.min(this.length(),t),e=this.data.slice(this.read,this.read+t),this.read+=t):0===t?e="":(e=0===this.read?this.data:this.data.slice(this.read),this.clear()),e},e.ByteStringBuffer.prototype.bytes=function(t){return void 0===t?this.data.slice(this.read):this.data.slice(this.read,this.read+t)},e.ByteStringBuffer.prototype.at=function(t){return this.data.charCodeAt(this.read+t)},e.ByteStringBuffer.prototype.setAt=function(t,e){return this.data=this.data.substr(0,this.read+t)+String.fromCharCode(e)+this.data.substr(this.read+t+1),this},e.ByteStringBuffer.prototype.last=function(){return this.data.charCodeAt(this.data.length-1)},e.ByteStringBuffer.prototype.copy=function(){var t=e.createBuffer(this.data);return t.read=this.read,t},e.ByteStringBuffer.prototype.compact=function(){return this.read>0&&(this.data=this.data.slice(this.read),this.read=0),this},e.ByteStringBuffer.prototype.clear=function(){return this.data="",this.read=0,this},e.ByteStringBuffer.prototype.truncate=function(t){var e=Math.max(0,this.length()-t);return this.data=this.data.substr(this.read,e),this.read=0,this},e.ByteStringBuffer.prototype.toHex=function(){for(var t="",e=this.read;e<this.data.length;++e){var r=this.data.charCodeAt(e);r<16&&(t+="0"),t+=r.toString(16)}return t},e.ByteStringBuffer.prototype.toString=function(){return e.decodeUtf8(this.bytes())},e.createBuffer=function(t,r){return r=r||"raw",void 0!==t&&"utf8"===r&&(t=e.encodeUtf8(t)),new e.ByteBuffer(t)},e.fillString=function(t,e){for(var r="";e>0;)1&e&&(r+=t),(e>>>=1)>0&&(t+=t);return r},e.encodeUtf8=function(t){return unescape(encodeURIComponent(t))},e.decodeUtf8=function(t){return decodeURIComponent(escape(t))};var i=t.sha256=t.sha256||{};t.md=t.md||{},t.md.algorithms=t.md.algorithms||{},t.md.sha256=t.md.algorithms.sha256=i,i.create=function(){o||(a=String.fromCharCode(128),a+=t.util.fillString(String.fromCharCode(0),64),s=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],o=!0);var e=null,r=t.util.createBuffer(),n=new Array(64),i={algorithm:"sha256",blockLength:64,digestLength:32,messageLength:0,messageLength64:[0,0],start:function(){return i.messageLength=0,i.messageLength64=[0,0],r=t.util.createBuffer(),e={h0:1779033703,h1:3144134277,h2:1013904242,h3:2773480762,h4:1359893119,h5:2600822924,h6:528734635,h7:1541459225},i}};return i.start(),i.update=function(a,o){return"utf8"===o&&(a=t.util.encodeUtf8(a)),i.messageLength+=a.length,i.messageLength64[0]+=a.length/4294967296>>>0,i.messageLength64[1]+=a.length>>>0,r.putBytes(a),u(e,n,r),(r.read>2048||0===r.length())&&r.compact(),i},i.digest=function(){var o=t.util.createBuffer();o.putBytes(r.bytes()),o.putBytes(a.substr(0,64-(i.messageLength64[1]+8&63))),o.putInt32(i.messageLength64[0]<<3|i.messageLength64[0]>>>28),o.putInt32(i.messageLength64[1]<<3);var s={h0:e.h0,h1:e.h1,h2:e.h2,h3:e.h3,h4:e.h4,h5:e.h5,h6:e.h6,h7:e.h7};u(s,n,o);var h=t.util.createBuffer();return h.putInt32(s.h0),h.putInt32(s.h1),h.putInt32(s.h2),h.putInt32(s.h3),h.putInt32(s.h4),h.putInt32(s.h5),h.putInt32(s.h6),h.putInt32(s.h7),h},i};var a=null,o=!1,s=null;function u(t,e,r){for(var n,i,a,o,u,h,d,f,c,p,g,y,l,m=r.length();m>=64;){for(u=0;u<16;++u)e[u]=r.getInt32();for(;u<64;++u)n=((n=e[u-2])>>>17|n<<15)^(n>>>19|n<<13)^n>>>10,i=((i=e[u-15])>>>7|i<<25)^(i>>>18|i<<14)^i>>>3,e[u]=n+e[u-7]+i+e[u-16]|0;for(h=t.h0,d=t.h1,f=t.h2,c=t.h3,p=t.h4,g=t.h5,y=t.h6,l=t.h7,u=0;u<64;++u)a=(h>>>2|h<<30)^(h>>>13|h<<19)^(h>>>22|h<<10),o=h&d|f&(h^d),n=l+((p>>>6|p<<26)^(p>>>11|p<<21)^(p>>>25|p<<7))+(y^p&(g^y))+s[u]+e[u],l=y,y=g,g=p,p=c+n|0,c=f,f=d,d=h,h=n+(i=a+o)|0;t.h0=t.h0+h|0,t.h1=t.h1+d|0,t.h2=t.h2+f|0,t.h3=t.h3+c|0,t.h4=t.h4+p|0,t.h5=t.h5+g|0,t.h6=t.h6+y|0,t.h7=t.h7+l|0,m-=64}}e.hasWideChar=function(t){for(var e=0;e<t.length;e++)if(t.charCodeAt(e)>>>8)return!0;return!1},window.forge_sha256=function(r){var n=t.md.sha256.create();return n.update(r,e.hasWideChar(r)?"utf8":void 0),n.digest().toHex()}}()},function(t,e,r){"use strict";r(6),r(0);var n=[{service:"cpanel",url:"localhost",displayName:"cPanel"},{service:"github",url:"https://github.com/github",displayName:"GitHub"},{service:"bitbucket",url:"https://bitbucket.org/account/signin/",displayName:"Bitbucket"},{service:"amazon",url:"https://www.amazon.com/",displayName:"Amazon"},{service:"adobe",url:"https://accounts.adobe.com/",displayName:"Adobe"},{service:"apple",url:"https://www.apple.com/",displayName:"Apple"},{service:"dropbox",url:"https://www.dropbox.com/login",displayName:"Dropbox"},{service:"ebay",url:"https://signin.ebay.com/",displayName:"Ebay"},{service:"facebook",url:"https://www.facebook.com/",displayName:"Facebook"},{service:"google",url:"https://www.google.com/",displayName:"Google"},{service:"linkedin",url:"https://www.linkedin.com/",displayName:"LinkedIn"},{service:"paypal",url:"https://www.paypal.com/",displayName:"PayPal"},{service:"tumblr",url:"https://www.tumblr.com/",displayName:"Tumblr"},{service:"twitter",url:"https://twitter.com/",displayName:"Twitter"},{service:"wikipedia",url:"https://www.wikipedia.org/",displayName:"Wikipedia"},{service:"wordpress",url:"https://www.wordpress.com/",displayName:"WordPress"},{service:"yahoo",url:"https://login.yahoo.com/",displayName:"Yahoo"}],i=document.querySelector(".form"),a=document.querySelector('input[name="user"]'),o=document.querySelector('input[name="master"]'),s=document.querySelector(".sitios"),u=document.querySelector('input[name="length"]')||14,h=document.querySelector(".eye");function d(){s.innerHTML=n.map(function(t,e){return'\n        <tr id="'+e+'"><td class="sitio"><a href="sitio.url">'+t.displayName+'</a> </td>\n        <td class="password">'+function(t){if(a.value&&o.value){var e=a.value.toLower,r=forge_sha256(o.value+"/"+e+"@"+t),n=r.match(/[aeiou]/gi),i="{!#$%&()*+,-./:;<=>?@[{}]^_| ~}",s=Math.round(n.length/100*i.length);return(r=r.slice(0,u/3)+i[s]+r.slice(u/3,2*u/3)+i[s+2]+r.slice(2*u/3,u)).slice(1,u+1)}return""}(t.service)+"</td></tr>\n      \n          "}).join("")}o.addEventListener("change",d),a.addEventListener("change",d),i.addEventListener("submit",function(t){return t.preventDefault()}),h.addEventListener("mousedown",function(){o.type="text",this.innerHTML="&#9675;"}),h.addEventListener("mouseup",function(){o.type="password",this.classList.toggle("show")}),s.addEventListener("click",function(t){"password"!==!t.target.className&&window.getSelection().selectAllChildren(t.target)}),d()},,,,,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,